name: Python package

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # Also trigger on page_build, as well as release created events
  page_build:
  release:
    types: # This configuration does not affect the page_build event above
      - created



jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.7, 3.8, 3.9]
      fail-fast: false

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Bash
        shell: bash -l {0}
        run: |
          pip install -r requirements.txt 
      - name: PowerShell Core
        shell: pwsh
        run: |
          pip install -r requirements.txt 
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest and check code coverage
        run: |
          pytest --cov tests/
      - name: Upload coverage to codecov.io
        run: bash <(curl -s https://codecov.io/bash)
        if: always()
        env:
         CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  deploy:
    name: Push to EC2 Instance and run application 
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v1

      - name: Deploy to my EC2 instance
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          SOURCE: ${{ secrets.SOURCE }}
          REMOTE_HOST:  ${{ secrets.REMOTE_HOST }}
          REMOTE_USER:  ${{ secrets.REMOTE_USER }}
          TARGET:  ${{ secrets.TARGET }}
          SESSION: ${{ secrets.SESSION }}
        run: |
             echo "$SSH_PRIVATE_KEY" >> identity.pem
             ssh -i identity.pem "$REMOTE_USER"@"$REMOTE_HOST" 
             cd $TARGET 
             git fetch 
             git pull 
             tmux kill-ses -t $SESSION
             tmux new-session -d -s $SESSION 'bash boot.sh'